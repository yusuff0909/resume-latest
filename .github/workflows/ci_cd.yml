name: Build, Push, and Deploy Image

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write 
  contents: read
  pull-requests: write 

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ROLE: ${{ secrets.AWS_ROLE_ARN }}
  ECR_REPO_NAME: dev1
  IMAGE_TAG: ${{ github.run_number }}
  TASK_DEFINITION: nginx-task
  ECS_CLUSTER: nginx-cluster
  ECS_SERVICE: nginx-service
  CONTAINER_NAME: nginx

jobs:
  Build:
    runs-on: ubuntu-latest
    outputs:  # Define outputs for the Deploy job
      image-uri: ${{ steps.set-image.outputs.image-uri }}
    steps:
      - name: Clone repo
        uses: actions/checkout@v3
      
      - name: AWS Creds Config 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to ECR 
        uses: aws-actions/amazon-ecr-login@v1
        id: ecr-login
      - name: FS Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'  
          format: 'json'
          output: "trivy-fs-results.json"
          exit-code: '0'  
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true  

      - name: Build and tag image 
        run: |
          docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{ env.IMAGE_TAG }} .
      
      - name: Scan Docker Image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{ env.IMAGE_TAG }}"
          format: "json"
          exit-code: "0"
          output: "trivy-image-results.json"
          severity: "CRITICAL,HIGH"
      
      - name: Push image to ECR
        run: |
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{ env.IMAGE_TAG }}
      
      - name: Store image URI for Deploy job
        id: set-image
        run: |
          IMAGE_URI="${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{ env.IMAGE_TAG }}"
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Post Fix Suggestions on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            // Use require() to import Node.js modules
            const fs = require('fs');
            
            try {
              // Read file synchronously (use async methods if preferred)
              const fsReport = JSON.parse(fs.readFileSync('trivy-fs-results.json', 'utf8'));
              const imageReport = JSON.parse(fs.readFileSync('trivy-image-results.json', 'utf8'));
              
              const formatVulns = (vulns) => vulns.map(v => `
                **Package:** ${v.PkgName} (${v.InstalledVersion})  
                **CVE:** ${v.VulnerabilityID} (${v.Severity})  
                **Fix Version:** ${v.FixedVersion || 'None'}  
                **Advisory:** ${v.PrimaryURL || 'N/A'}
              `).join('\n');

              const fsVulns = fsReport.Results?.flatMap(r => r.Vulnerabilities || []);
              const imageVulns = imageReport.Results?.flatMap(r => r.Vulnerabilities || []);

              let comment = '## 🔍 Trivy Security Report\n';
              if (fsVulns.length > 0) comment += `### 📂 Filesystem Vulnerabilities\n${formatVulns(fsVulns)}\n`;
              if (imageVulns.length > 0) comment += `### 🐳 Docker Image Vulnerabilities\n${formatVulns(imageVulns)}\n`;
              if (fsVulns.length + imageVulns.length === 0) comment += '✅ No critical/high vulnerabilities found.';

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              core.error('Failed to process Trivy results: ' + error.message);
            }
  Deploy:
    runs-on: ubuntu-latest
    needs: Build  # Depends on Build job
    steps:
      - name: AWS Creds Config 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Download current task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query taskDefinition > task-definition.json
      
      - name: Update task definition with new ECR image
        run: |
          jq --arg IMAGE_URI "${{ needs.Build.outputs.image-uri }}" '.containerDefinitions[0].image = $IMAGE_URI | 
          del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .deregisteredAt)' task-definition.json > register-task-definition.json
      
      - name: Register new task definition
        id: register-task
        run: |
          NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://register-task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "new-task-def-arn=$NEW_TASK_DEFINITION_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition ${{ steps.register-task.outputs.new-task-def-arn }} --force-new-deployment